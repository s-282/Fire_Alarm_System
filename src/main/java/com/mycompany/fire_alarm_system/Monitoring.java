/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.fire_alarm_system;

import java.util.Map.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Date;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import static com.mycompany.fire_alarm_system.Mainsc.f0;
import static com.mycompany.fire_alarm_system.Mainsc.f1;
import static com.mycompany.fire_alarm_system.Mainsc.f2;
import static com.mycompany.fire_alarm_system.Mainsc.f3;
import static com.mycompany.fire_alarm_system.Mainsc.f4;
import static com.mycompany.fire_alarm_system.Mainsc.f5;
import java.time.LocalDateTime;  
import java.time.format.DateTimeFormatter;  
import java.sql.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.awt.Color;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.Calendar;
public class Monitoring extends javax.swing.JFrame {

    /**
     * Creates new form Start_Monitoring
     */
    public Monitoring() {
        initComponents();
        jTable1.setDefaultRenderer(String.class, new colorcode());

    }
    ScheduledExecutorService ses = Executors.newScheduledThreadPool(1);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(51, 51, 0));
        jPanel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jButton2.setBackground(new java.awt.Color(204, 204, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("STOP");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 204, 204));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("START");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(51, 51, 0));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0), 2));
        jTable1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(204, 204, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "CO SensoR", "Heat Sensor", "Smoke Sensor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setRowHeight(30);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setShowGrid(true);
        jTable1.setSurrendersFocusOnKeystroke(true);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(51, 51, 0));

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 40)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ground Floor");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 952, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(51, 51, 0));
        jMenuBar1.setForeground(new java.awt.Color(51, 51, 0));

        jMenu1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0), 2));
        jMenu1.setForeground(new java.awt.Color(204, 204, 204));
        jMenu1.setText("GROUND FLOOR");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jMenu1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jMenu1FocusLost(evt);
            }
        });
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(204, 204, 204));
        jMenu2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0), 2));
        jMenu2.setForeground(new java.awt.Color(204, 204, 204));
        jMenu2.setText("FIRST FLOOR");
        jMenu2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0), 2));
        jMenu3.setForeground(new java.awt.Color(204, 204, 204));
        jMenu3.setText("SECOND FLOOR");
        jMenu3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0), 2));
        jMenu4.setForeground(new java.awt.Color(204, 204, 204));
        jMenu4.setText("THIRD FLOOR");
        jMenu4.setContentAreaFilled(false);
        jMenu4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0), 2));
        jMenu5.setForeground(new java.awt.Color(204, 204, 204));
        jMenu5.setText("FOURTH FLOOR");
        jMenu5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu5);

        jMenu6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0), 2));
        jMenu6.setForeground(new java.awt.Color(204, 204, 204));
        jMenu6.setText("FIFTH FLOOR");
        jMenu6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        Mainsc.dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2MouseClicked
String sid_0,sid_1,sid_2,sid_3,sid_4,sid_5,cid_0,cid_1,cid_2,cid_3,cid_4,cid_5,hid_0,hid_1,hid_2,hid_3,hid_4,hid_5;
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        for (Entry<String, Location> mp : f0.entrySet()) {
            if (!mp.getValue().Sid.equals("")) {
                Runnable task10 = () -> {
                    mp.getValue().setScvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task10, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Hid.equals("")) {
                Runnable task11 = () -> {
                    mp.getValue().setHcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task11, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Cid.equals("")) {
                Runnable task12 = () -> {
                    mp.getValue().setCcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task12, 0, 2, TimeUnit.SECONDS);
            }
        }
        for (Entry<String, Location> mp : f1.entrySet()) {
            if (!mp.getValue().Sid.equals("")) {
                Runnable task20 = () -> {
                    mp.getValue().setScvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task20, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Hid.equals("")) {
                Runnable task21 = () -> {
                    mp.getValue().setHcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task21, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Cid.equals("")) {
                Runnable task22 = () -> {
                    mp.getValue().setCcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task22, 0, 2, TimeUnit.SECONDS);
            }
        }
        for (Entry<String, Location> mp : f2.entrySet()) {
            if (!mp.getValue().Sid.equals("")) {
                Runnable task30 = () -> {
                    mp.getValue().setScvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task30, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Hid.equals("")) {
                Runnable task31 = () -> {
                    mp.getValue().setHcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task31, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Cid.equals("")) {
                Runnable task32 = () -> {
                    mp.getValue().setCcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task32, 0, 2, TimeUnit.SECONDS);
            }
        }
        for (Entry<String, Location> mp : f3.entrySet()) {
            if (!mp.getValue().Sid.equals("")) {
                Runnable task40 = () -> {
                    mp.getValue().setScvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task40, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Hid.equals("")) {
                Runnable task41 = () -> {
                    mp.getValue().setHcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task41, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Cid.equals("")) {
                Runnable task42 = () -> {
                    mp.getValue().setCcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task42, 0, 2, TimeUnit.SECONDS);
            }
        }
        for (Entry<String, Location> mp : f4.entrySet()) {
            if (!mp.getValue().Sid.equals("")) {
                Runnable task50 = () -> {
                    mp.getValue().setScvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task50, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Hid.equals("")) {
                Runnable task51 = () -> {
                    mp.getValue().setHcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task51, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Cid.equals("")) {
                Runnable task52 = () -> {
                    mp.getValue().setCcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task52, 0, 2, TimeUnit.SECONDS);
            }
        }
        for (Entry<String, Location> mp : f5.entrySet()) {
            if (!mp.getValue().Sid.equals("")) {
                Runnable task60 = () -> {
                    mp.getValue().setScvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task60, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Hid.equals("")) {
                Runnable task61 = () -> {
                    mp.getValue().setHcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task61, 0, 2, TimeUnit.SECONDS);
            }
            if (!mp.getValue().Cid.equals("")) {
                Runnable task62 = () -> {
                    mp.getValue().setCcvalue();
                };
                ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task62, 0, 2, TimeUnit.SECONDS);
            }
        }
        for(Entry<String,Location> mp : f0.entrySet()){
        sid_0=mp.getValue().Sid;
           hid_0=mp.getValue().Hid;
           
           cid_0=mp.getValue().Cid;
         
       }
    
     for(Entry<String,Location> mp : f1.entrySet()){
        sid_1=mp.getValue().Sid;
          hid_1=mp.getValue().Hid;
           cid_1=mp.getValue().Cid;
       }
     
      for(Entry<String,Location> mp : f2.entrySet()){
         sid_2=mp.getValue().Sid;
          hid_2=mp.getValue().Hid;
          cid_2=mp.getValue().Cid;
        
       }
       for(Entry<String,Location> mp : f3.entrySet()){
         sid_3=mp.getValue().Sid;
         hid_3=mp.getValue().Hid;
         cid_3=mp.getValue().Cid;
        
       }
        for(Entry<String,Location> mp : f4.entrySet()){
        sid_4=mp.getValue().Sid;
         hid_4=mp.getValue().Hid;
          cid_4=mp.getValue().Cid;
        
       }
         for(Entry<String,Location> mp : f5.entrySet())
         {
         sid_5=mp.getValue().Sid;
         hid_5=mp.getValue().Hid;
          cid_5=mp.getValue().Cid;
        
       }

        DefaultTableModel tModel1 = (DefaultTableModel) jTable1.getModel();
        if (tModel1.getRowCount() != 0) {
            int c = tModel1.getRowCount();
            for (int i = 0; i < c; i++) {
                tModel1.removeRow(0);
            }
        }

        DefaultTableModel tModel = (DefaultTableModel) jTable1.getModel();
        for (Entry<String, Location> mp : f0.entrySet()) {
            String data[] = {mp.getKey(), String.valueOf(mp.getValue().Scvalue), String.valueOf(mp.getValue().Hcvalue), String.valueOf(mp.getValue().Ccvalue)};
            tModel.addRow(data);
        }

      
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        jLabel1.setText("FIRST FLOOR");
        DefaultTableModel tModel1 = (DefaultTableModel) jTable1.getModel();
        if (tModel1.getRowCount() != 0) {
            int c = tModel1.getRowCount();
            for (int i = 0; i < c; i++) {
                tModel1.removeRow(0);
            }
        }
        DefaultTableModel tModel = (DefaultTableModel) jTable1.getModel();
        for (Entry<String, Location> mp : f1.entrySet()) {

            Runnable task2 = () -> {
                String data[] = {mp.getKey(), String.valueOf(mp.getValue().Scvalue), String.valueOf(mp.getValue().Hcvalue), String.valueOf(mp.getValue().Ccvalue)};
                tModel.addRow(data);
            };
            ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task2, 0, 2, TimeUnit.SECONDS);
        }
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        jLabel1.setText("SECOND FLOOR");
        DefaultTableModel tModel1 = (DefaultTableModel) jTable1.getModel();
        if (tModel1.getRowCount() != 0) {
            int c = tModel1.getRowCount();
            for (int i = 0; i < c; i++) {
                tModel1.removeRow(0);
            }
        }
        DefaultTableModel tModel = (DefaultTableModel) jTable1.getModel();
        for (Entry<String, Location> mp : f2.entrySet()) {
            Runnable task3 = () -> {
                String data[] = {mp.getKey(), String.valueOf(mp.getValue().Scvalue), String.valueOf(mp.getValue().Hcvalue), String.valueOf(mp.getValue().Ccvalue)};
                tModel.addRow(data);
            };
            ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task3, 0, 2, TimeUnit.SECONDS);

        }
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
        jLabel1.setText("GROUND FLOOR");
        DefaultTableModel tModel1 = (DefaultTableModel) jTable1.getModel();
        if (tModel1.getRowCount() != 0) {
            int c = tModel1.getRowCount();
            for (int i = 0; i < c; i++) {
                tModel1.removeRow(0);
            }
        }
        DefaultTableModel tModel = (DefaultTableModel) jTable1.getModel();
        for (Entry<String, Location> mp : f0.entrySet()) {
            Runnable task111 = () -> {
                String data[] = {mp.getKey(), String.valueOf(mp.getValue().Scvalue), String.valueOf(mp.getValue().Hcvalue), String.valueOf(mp.getValue().Ccvalue)};
                tModel.addRow(data);
            };
            ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task111, 0, 2, TimeUnit.SECONDS);
        }
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        jLabel1.setText("THIRD FLOOR");
        DefaultTableModel tModel1 = (DefaultTableModel) jTable1.getModel();
        if (tModel1.getRowCount() != 0) {
            int c = tModel1.getRowCount();
            for (int i = 0; i < c; i++) {
                tModel1.removeRow(0);
            }
        }
        DefaultTableModel tModel = (DefaultTableModel) jTable1.getModel();
        for (Entry<String, Location> mp : f3.entrySet()) {
            Runnable task4 = () -> {
                String data[] = {mp.getKey(), String.valueOf(mp.getValue().Scvalue), String.valueOf(mp.getValue().Hcvalue), String.valueOf(mp.getValue().Ccvalue)};
                tModel.addRow(data);
            };
            ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task4, 0, 2, TimeUnit.SECONDS);
        }
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        // TODO add your handling code here:
        jLabel1.setText("FOURTH FLOOR");
        DefaultTableModel tModel1 = (DefaultTableModel) jTable1.getModel();
        if (tModel1.getRowCount() != 0) {
            int c = tModel1.getRowCount();
            for (int i = 0; i < c; i++) {
                tModel1.removeRow(0);
            }
        }
        DefaultTableModel tModel = (DefaultTableModel) jTable1.getModel();
        for (Entry<String, Location> mp : f4.entrySet()) {
            Runnable task5 = () -> {
                String data[] = {mp.getKey(), String.valueOf(mp.getValue().Scvalue), String.valueOf(mp.getValue().Hcvalue), String.valueOf(mp.getValue().Ccvalue)};
                tModel.addRow(data);
            };
            ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task5, 0, 2, TimeUnit.SECONDS);
        }
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        // TODO add your handling code here:
        jLabel1.setText("FIFTH FLOOR");
        DefaultTableModel tModel1 = (DefaultTableModel) jTable1.getModel();
        if (tModel1.getRowCount() != 0) {
            int c = tModel1.getRowCount();
            for (int i = 0; i < c; i++) {
                tModel1.removeRow(0);
            }
        }
        DefaultTableModel tModel = (DefaultTableModel) jTable1.getModel();
        for (Entry<String, Location> mp : f5.entrySet()) {
            Runnable task6 = () -> {
                String data[] = {mp.getKey(), String.valueOf(mp.getValue().Scvalue), String.valueOf(mp.getValue().Hcvalue), String.valueOf(mp.getValue().Ccvalue)};
                tModel.addRow(data);
            };
            ScheduledFuture<?> scheduledFuture = ses.scheduleAtFixedRate(task6, 0, 2, TimeUnit.SECONDS);

        }
    }//GEN-LAST:event_jMenu6MouseClicked

    private void jMenu1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMenu1FocusGained
        // TODO add your handling code here:
        jMenu1.setForeground(new java.awt.Color(230, 57, 70));
    }//GEN-LAST:event_jMenu1FocusGained

    private void jMenu1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMenu1FocusLost
        // TODO add your handling code here:
        jMenu1.setForeground(new java.awt.Color(29, 53, 87));
    }//GEN-LAST:event_jMenu1FocusLost

    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try{
    
      
     PrintWriter pr = new PrintWriter(new FileOutputStream(
    new File("C:\\Users\\Dev Bansal\\Downloads\\Fire-Alarm-System-master (5)\\Fire-Alarm-System-master (5)\\Fire-Alarm-System-master\\src\\main\\java\\com\\mycompany\\fire_alarm_system\\log.txt"), 
    true /* append = true */)); //change your file path in the above line
       
           
              
       DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");  
             LocalDateTime now = LocalDateTime.now();  
        String formatDateTime = now.format(format);    
                pr.append(formatDateTime+"\n");
           
       
        for(int i=0;i<jTable1.getRowCount();i++)
        {
        
            pr.append((String)jLabel1.getText()+"   ");
            String si,ci,hi;
            si=sid_0;
                ci=cid_0;
                hi=hid_0;
            if((String)jLabel1.getText()=="GROUND FLOOR")
            {
                si=sid_0;
                ci=cid_0;
                hi=hid_0;
                
            }
             if((String)jLabel1.getText()=="Ground Floor")
            {
                si=sid_0;
                ci=cid_0;
                hi=hid_0;
                
            }
              if((String)jLabel1.getText()=="FIRST FLOOR")
            {
                si=sid_1;
                ci=cid_1;
                hi=hid_1;
                
            }
               if((String)jLabel1.getText()=="SECOND FLOOR")
            {
                si=sid_2;
                ci=cid_2;
                hi=hid_2;
                
            }
                if((String)jLabel1.getText()=="THIRD FLOOR")
            {
                si=sid_3;
                ci=cid_3;
                hi=hid_3;
                
            }
                 if((String)jLabel1.getText()=="FOURTH FLOOR")
            {
                si=sid_4;
                ci=cid_4;
                hi=hid_4;
                
            }
                  if((String)jLabel1.getText()=="FIFTH FLOOR")
            {
                si=sid_5;
                ci=cid_5;
                hi=hid_5;
                
            }
               pr.append("Smoke Sensor id is "+(String)si+"\n CO Sensor id is   "+(String)ci+"\nHeat Sensor id is  "+(String)hi+"\n"); 
        int tot=0;
            for(int j=0;j<jTable1.getColumnCount();j++)
            {
                if(j==0)
                pr.append((String)jTable1.getModel().getValueAt(i, j)+"\n");
               float x=0;
               if(j>=1)
               {
               x=Float.parseFloat((String) jTable1.getModel().getValueAt(i,j)+"\n");
                
               if(j==1)
               {
                    if( x>Location.Ctvalue  )
                    {
                         pr.append(" CO Sensor threshold reached and value is "+(String)jTable1.getModel().getValueAt(i, j)+"\n");
                        tot++;
                    }
                    else
                    {
                        pr.append(" CO Sensor threshold not reached and value is "+(String)jTable1.getModel().getValueAt(i, j)+"\n");
                    }
               }
                
               else if(j==2)
               { if( x>Location.Htvalue)
                    {
                          pr.append(" Heat Sensor threshold reached and value is "+(String)jTable1.getModel().getValueAt(i, j)+"\n");
                        tot++;

                    }
               else
               {
                   pr.append(" Heat Sensor threshold not reached and value is "+(String)jTable1.getModel().getValueAt(i, j)+"\n");
               }
               }
               
               else if(j==3)
               {
                    if( x>Location.Stvalue )
                    {
                         pr.append(" Smoke Sensor threshold reached and value is "+(String)jTable1.getModel().getValueAt(i, j)+"\n");
                        tot++;
                    }
                    else
                    {
                         pr.append(" Smoke Sensor threshold not reached and value is "+(String)jTable1.getModel().getValueAt(i, j)+"\n");
                    }
                }
               }
            }
                
                 
                 if(tot==0)
                       pr.append("Safe");
                 else if(tot==1)
                      pr.append("Moderate");
                  else if(tot==2)
                      pr.append("Unsafe");
                  else if(tot==3)
                      pr.append("Critical");
            
            pr.append("\n_______________\n");
            
        }
            pr.append("\n************************************************************\n");
        pr.close();
        }catch(Exception ex)
        {
            ex.printStackTrace();
            
        }
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    public int flagmail = 0;
    public class colorcode extends DefaultTableCellRenderer {
    
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
            float value1 = 0, value2 = 0, value3 = 0, value4 = 0;
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
            switch (col) {
                case 1:
                    value2 = Float.parseFloat((String) table.getModel().getValueAt(row, col));
                case 2:
                    value3 = Float.parseFloat((String) table.getModel().getValueAt(row, col));
                case 3:
                    value4 = Float.parseFloat((String) table.getModel().getValueAt(row, col));
                default:
                    value1 = Float.parseFloat((String) table.getModel().getValueAt(row, col));
            }
            if (value2 > Location.Stvalue && col == 1) {
                c.setForeground(Color.red);
                flagmail++;
                
            }else if (value3 > Location.Htvalue && col == 2) {
                c.setForeground(Color.red);
                flagmail++;
                
            }else if (value4 > Location.Ctvalue && col == 3) {
                c.setForeground(Color.red);
                flagmail++;
                
            } else {
                c.setForeground(Color.green);
                
            }
            //System.out.println(flagmail);
            if(flagmail == 2)
            {
                flagmail++;
                try {
                Mail.sendEmail("iit2019096@iiita.ac.in"); // change your mail here
            } catch (Exception ex) {
                Logger.getLogger(Monitoring.class.getName()).log(Level.SEVERE, null, ex);
            }
                
            }
            
            
            
            return c;
            
        }
        
        
        
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Monitoring.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Monitoring.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Monitoring.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Monitoring.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Monitoring().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
